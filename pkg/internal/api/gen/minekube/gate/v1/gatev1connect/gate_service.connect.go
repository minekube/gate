// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: minekube/gate/v1/gate_service.proto

package gatev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.minekube.com/gate/pkg/internal/api/gen/minekube/gate/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GateServiceName is the fully-qualified name of the GateService service.
	GateServiceName = "minekube.gate.v1.GateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GateServiceGetPlayerProcedure is the fully-qualified name of the GateService's GetPlayer RPC.
	GateServiceGetPlayerProcedure = "/minekube.gate.v1.GateService/GetPlayer"
	// GateServiceListServersProcedure is the fully-qualified name of the GateService's ListServers RPC.
	GateServiceListServersProcedure = "/minekube.gate.v1.GateService/ListServers"
	// GateServiceUpdateServersProcedure is the fully-qualified name of the GateService's UpdateServers
	// RPC.
	GateServiceUpdateServersProcedure = "/minekube.gate.v1.GateService/UpdateServers"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gateServiceServiceDescriptor             = v1.File_minekube_gate_v1_gate_service_proto.Services().ByName("GateService")
	gateServiceGetPlayerMethodDescriptor     = gateServiceServiceDescriptor.Methods().ByName("GetPlayer")
	gateServiceListServersMethodDescriptor   = gateServiceServiceDescriptor.Methods().ByName("ListServers")
	gateServiceUpdateServersMethodDescriptor = gateServiceServiceDescriptor.Methods().ByName("UpdateServers")
)

// GateServiceClient is a client for the minekube.gate.v1.GateService service.
type GateServiceClient interface {
	// GetPlayer returns the player by the given id or username.
	// If the player is not online, the rpc fails with a NOT_FOUND error code.
	GetPlayer(context.Context, *connect.Request[v1.GetPlayerRequest]) (*connect.Response[v1.GetPlayerResponse], error)
	// ListServers returns all registered servers.
	ListServers(context.Context, *connect.Request[v1.ListServersRequest]) (*connect.Response[v1.ListServersResponse], error)
	// UpdateServers allows multiple servers to be added or removed in a single request.
	UpdateServers(context.Context, *connect.Request[v1.UpdateServersRequest]) (*connect.Response[v1.UpdateServersResponse], error)
}

// NewGateServiceClient constructs a client for the minekube.gate.v1.GateService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gateServiceClient{
		getPlayer: connect.NewClient[v1.GetPlayerRequest, v1.GetPlayerResponse](
			httpClient,
			baseURL+GateServiceGetPlayerProcedure,
			connect.WithSchema(gateServiceGetPlayerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listServers: connect.NewClient[v1.ListServersRequest, v1.ListServersResponse](
			httpClient,
			baseURL+GateServiceListServersProcedure,
			connect.WithSchema(gateServiceListServersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateServers: connect.NewClient[v1.UpdateServersRequest, v1.UpdateServersResponse](
			httpClient,
			baseURL+GateServiceUpdateServersProcedure,
			connect.WithSchema(gateServiceUpdateServersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gateServiceClient implements GateServiceClient.
type gateServiceClient struct {
	getPlayer     *connect.Client[v1.GetPlayerRequest, v1.GetPlayerResponse]
	listServers   *connect.Client[v1.ListServersRequest, v1.ListServersResponse]
	updateServers *connect.Client[v1.UpdateServersRequest, v1.UpdateServersResponse]
}

// GetPlayer calls minekube.gate.v1.GateService.GetPlayer.
func (c *gateServiceClient) GetPlayer(ctx context.Context, req *connect.Request[v1.GetPlayerRequest]) (*connect.Response[v1.GetPlayerResponse], error) {
	return c.getPlayer.CallUnary(ctx, req)
}

// ListServers calls minekube.gate.v1.GateService.ListServers.
func (c *gateServiceClient) ListServers(ctx context.Context, req *connect.Request[v1.ListServersRequest]) (*connect.Response[v1.ListServersResponse], error) {
	return c.listServers.CallUnary(ctx, req)
}

// UpdateServers calls minekube.gate.v1.GateService.UpdateServers.
func (c *gateServiceClient) UpdateServers(ctx context.Context, req *connect.Request[v1.UpdateServersRequest]) (*connect.Response[v1.UpdateServersResponse], error) {
	return c.updateServers.CallUnary(ctx, req)
}

// GateServiceHandler is an implementation of the minekube.gate.v1.GateService service.
type GateServiceHandler interface {
	// GetPlayer returns the player by the given id or username.
	// If the player is not online, the rpc fails with a NOT_FOUND error code.
	GetPlayer(context.Context, *connect.Request[v1.GetPlayerRequest]) (*connect.Response[v1.GetPlayerResponse], error)
	// ListServers returns all registered servers.
	ListServers(context.Context, *connect.Request[v1.ListServersRequest]) (*connect.Response[v1.ListServersResponse], error)
	// UpdateServers allows multiple servers to be added or removed in a single request.
	UpdateServers(context.Context, *connect.Request[v1.UpdateServersRequest]) (*connect.Response[v1.UpdateServersResponse], error)
}

// NewGateServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGateServiceHandler(svc GateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gateServiceGetPlayerHandler := connect.NewUnaryHandler(
		GateServiceGetPlayerProcedure,
		svc.GetPlayer,
		connect.WithSchema(gateServiceGetPlayerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gateServiceListServersHandler := connect.NewUnaryHandler(
		GateServiceListServersProcedure,
		svc.ListServers,
		connect.WithSchema(gateServiceListServersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gateServiceUpdateServersHandler := connect.NewUnaryHandler(
		GateServiceUpdateServersProcedure,
		svc.UpdateServers,
		connect.WithSchema(gateServiceUpdateServersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/minekube.gate.v1.GateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GateServiceGetPlayerProcedure:
			gateServiceGetPlayerHandler.ServeHTTP(w, r)
		case GateServiceListServersProcedure:
			gateServiceListServersHandler.ServeHTTP(w, r)
		case GateServiceUpdateServersProcedure:
			gateServiceUpdateServersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGateServiceHandler struct{}

func (UnimplementedGateServiceHandler) GetPlayer(context.Context, *connect.Request[v1.GetPlayerRequest]) (*connect.Response[v1.GetPlayerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("minekube.gate.v1.GateService.GetPlayer is not implemented"))
}

func (UnimplementedGateServiceHandler) ListServers(context.Context, *connect.Request[v1.ListServersRequest]) (*connect.Response[v1.ListServersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("minekube.gate.v1.GateService.ListServers is not implemented"))
}

func (UnimplementedGateServiceHandler) UpdateServers(context.Context, *connect.Request[v1.UpdateServersRequest]) (*connect.Response[v1.UpdateServersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("minekube.gate.v1.GateService.UpdateServers is not implemented"))
}
